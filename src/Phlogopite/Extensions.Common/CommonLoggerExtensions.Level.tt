<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
using System.Runtime.CompilerServices;

namespace Phlogopite.Extensions.Common
{
    using PropertyCollection = SpanBuilder<NamedProperty>;

    public static partial class CommonLoggerExtensions
    {
<#
    const int startPropertyCount = 1;
    const int maxPropertyCount = 4;

    string[] levels = { "Verbose", "Debug", "Info", "Warning", "Error", "Assert" };
    for (int levelIndex = 0; levelIndex != levels.Length; ++levelIndex)
    {
        ClearIndent();
        if (levelIndex != 0)
            WriteLine(string.Empty);

        string level = levels[levelIndex];
        string methodName = level.Substring(0, 1);

        PushIndent("        ");
        WriteLine($"#region {level}, omitting text");
        WriteLine(string.Empty);

        // Overloads without text parameter.
        for (int propertyCount = startPropertyCount; propertyCount <= maxPropertyCount; ++propertyCount)
        {
            if (propertyCount != startPropertyCount)
                WriteLine(string.Empty);

            WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
            WriteLine($"public static void {methodName}<TLogger>(this TLogger logger,");
            PushIndent("    ");
            for (int propertyIndex = 0; propertyIndex != propertyCount; ++propertyIndex)
            {
                if (propertyIndex != 0)
                    Write(", ");

                Write("in NamedProperty p" + propertyIndex);
            }

            WriteLine(")");
            WriteLine("where TLogger : ILogger<NamedProperty>");
            PopIndent();
            WriteLine("{");
            WriteLine($"    if (logger is null || !logger.IsEnabled(Level.{level}))");
            WriteLine("        return;");
            WriteLine(string.Empty);
            Write($"    AllocateThenWrite{propertyCount}(logger, Level.{level}, null");
            for (int propertyIndex = 0; propertyIndex != propertyCount; ++propertyIndex)
                Write(", p" + propertyIndex);

            WriteLine(");");
            WriteLine("}");
        }

        WriteLine(string.Empty);
        WriteLine($"#endregion {level}, omitting text");
        WriteLine(string.Empty);
        WriteLine($"#region {level}, including text");

        // Overloads with text parameter.
        for (int propertyCount = startPropertyCount; propertyCount <= maxPropertyCount; ++propertyCount)
        {
            WriteLine(string.Empty);

            WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
            WriteLine($"public static void {methodName}<TLogger>(this TLogger logger, string text,");
            PushIndent("    ");
            for (int propertyIndex = 0; propertyIndex != propertyCount; ++propertyIndex)
            {
                if (propertyIndex != 0)
                    Write(", ");

                Write("in NamedProperty p" + propertyIndex);
            }

            WriteLine(")");
            WriteLine("where TLogger : ILogger<NamedProperty>");
            PopIndent();
            WriteLine("{");
            WriteLine($"    if (logger is null || !logger.IsEnabled(Level.{level}))");
            WriteLine("        return;");
            WriteLine(string.Empty);
            Write($"    AllocateThenWrite{propertyCount}(logger, Level.{level}, text");
            for (int propertyIndex = 0; propertyIndex != propertyCount; ++propertyIndex)
                Write(", p" + propertyIndex);

            WriteLine(");");
            WriteLine("}");
        }

        WriteLine(string.Empty);
        WriteLine($"#endregion {level}, including text");
    }

    ClearIndent();
#>
    }
}
