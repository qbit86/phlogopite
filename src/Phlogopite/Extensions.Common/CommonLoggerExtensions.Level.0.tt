<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
using System.Runtime.CompilerServices;
using PropertyCollection = Phlogopite.SpanBuilder<Phlogopite.NamedProperty>;

namespace Phlogopite.Extensions.Common
{
    public static partial class CommonLoggerExtensions
    {
<#
var levels = new string[] { "Verbose", "Debug", "Info", "Warning", "Error", "Assert" };
for (int i = 0; i != levels.Length; ++i)
{
    if (i != 0)
        WriteLine(string.Empty);

    string level = levels[i];
    string methodName = level.Substring(0, 1);
#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void <#=methodName#><TLogger>(this TLogger logger, string text)
            where TLogger : ILogger<NamedProperty, PropertyCollection>
        {
            if (logger is null || !logger.IsEnabled(Level.<#=level#>))
                return;

            AllocateThenWrite0(logger, Level.<#=level#>, text);
        }
<#
}
#>
    }
}
