<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
using System.Runtime.CompilerServices;
using Phlogopite.Extensions.Tag;

namespace Phlogopite.Singletons.Mediator
{
    using PropertyCollection = SpanBuilder<NamedProperty>;

    public static partial class Log
    {
<#
const int startPropertyCount = 1;
const int maxPropertyCount = 4;

var levels = new string[] { "Verbose", "Debug", "Info", "Warning", "Error", "Assert" };
for (int levelIndex = 0; levelIndex != levels.Length; ++levelIndex)
{
    ClearIndent();
    if (levelIndex != 0)
        WriteLine(string.Empty);

    string level = levels[levelIndex];
    string methodName = level.Substring(0, 1);

    PushIndent("        ");
    WriteLine($"#region {level}");

    // Overloads with text parameter.
    for (int propertyCount = startPropertyCount; propertyCount <= maxPropertyCount; ++propertyCount)
    {
        WriteLine(string.Empty);

        WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
        WriteLine($"public static void {methodName}(string category, string text,");
        PushIndent("    ");
        for (int propertyIndex = 0; propertyIndex != propertyCount; ++propertyIndex)
        {
            if (propertyIndex != 0)
                Write(", ");

            Write("in NamedProperty p" + propertyIndex);
        }

        WriteLine(",");
        WriteLine("[CallerMemberName] string source = null)");
        PopIndent();
        WriteLine("{");
        Write($"    Logger.Write(Level.{level}, category, text");
        for (int propertyIndex = 0; propertyIndex != propertyCount; ++propertyIndex)
            Write(", p" + propertyIndex);

        WriteLine(", source);");
        WriteLine("}");
    }

    WriteLine(string.Empty);
    WriteLine($"#endregion {level}");
}

ClearIndent();
#>
    }
}
