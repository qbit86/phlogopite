<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
using System;
using System.Buffers;

namespace Phlogopite.Extensions
{
    public static partial class WriterExtensions
    {
<#
const int startPropertyCount = 1;
const int maxPropertyCount = 4;

for (int propertyCount = startPropertyCount; propertyCount <= maxPropertyCount; ++propertyCount)
{
    ClearIndent();
    if (propertyCount != startPropertyCount)
        WriteLine(string.Empty);

    PushIndent("        ");
    WriteLine("private static void WriteUnchecked<TWriter, TProperty>(in TWriter writer, Level level, string text,");
    PushIndent("    ");
    for (int propertyIndex = 0; propertyIndex != propertyCount; ++propertyIndex)
    {
        if (propertyIndex != 0)
            Write(", ");

        Write("in TProperty p" + propertyIndex);
    }

    WriteLine(")");
    WriteLine("where TWriter : IWriter<TProperty>");
    PopIndent();
    WriteLine("{");
    PushIndent("    ");
    WriteLine($"TProperty[] properties = ArrayPool<TProperty>.Shared.Rent({propertyCount});");
    WriteLine("try");
    WriteLine("{");
    for (int propertyIndex = 0; propertyIndex != propertyCount; ++propertyIndex)
        WriteLine($"    properties[{propertyIndex}] = p{propertyIndex};");

    WriteLine($"    writer.Write(level, text, properties.AsSpan(0, {propertyCount}));");
    WriteLine("}");
    WriteLine("finally");
    WriteLine("{");
    WriteLine("    ArrayPool<TProperty>.Shared.Return(properties);");
    WriteLine("}");
    PopIndent();
    WriteLine("}");
}

ClearIndent();
#>
    }
}
