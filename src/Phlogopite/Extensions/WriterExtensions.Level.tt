<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
using System.Runtime.CompilerServices;

namespace Phlogopite.Extensions
{
    public static partial class WriterExtensions
    {
<#
const int startPropertyCount = 1;
const int maxPropertyCount = 4;
var levels = new string[] { "Verbose", "Debug", "Info", "Warning", "Error", "Assert" };
for (int levelIndex = 0; levelIndex != levels.Length; ++levelIndex)
{
    if (levelIndex != 0)
        WriteLine(string.Empty);

    string level = levels[levelIndex];
    string methodName = level.Substring(0, 1);
    for (int propertyCount = startPropertyCount; propertyCount <= maxPropertyCount; ++propertyCount)
    {
        if (propertyCount != startPropertyCount)
            WriteLine(string.Empty);

        PushIndent("        ");
        WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
        WriteLine($"public static void {methodName}<TWriter>(this TWriter writer,");
        PushIndent("    ");
        for (int propertyIndex = 0; propertyIndex != propertyCount; ++propertyIndex)
        {
            if (propertyIndex != 0)
                Write(", ");

            Write("in NamedProperty p" + propertyIndex);
        }

        WriteLine(")");
        WriteLine("where TWriter : IWriter<NamedProperty>");
        PopIndent();
        WriteLine("{");
        WriteLine($"    if (writer is null || !writer.IsEnabled(Level.{level}))");
        WriteLine("        return;");
        ClearIndent();
        WriteLine(string.Empty);
        PushIndent("        ");
        PushIndent("    ");
        Write($"WriteUnchecked(writer, Level.{level}, null, ");
        for (int propertyIndex = 0; propertyIndex != propertyCount; ++propertyIndex)
        {
            if (propertyIndex != 0)
                Write(", ");

            Write("p" + propertyIndex);
        }

        WriteLine(");");
        PopIndent();
        WriteLine("}");
        ClearIndent();
    }

    for (int propertyCount = startPropertyCount; propertyCount <= maxPropertyCount; ++propertyCount)
    {
        WriteLine(string.Empty);

        PushIndent("        ");
        WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
        WriteLine($"public static void {methodName}<TWriter>(this TWriter writer, string text,");
        PushIndent("    ");
        for (int propertyIndex = 0; propertyIndex != propertyCount; ++propertyIndex)
        {
            if (propertyIndex != 0)
                Write(", ");

            Write("in NamedProperty p" + propertyIndex);
        }

        WriteLine(")");
        WriteLine("where TWriter : IWriter<NamedProperty>");
        PopIndent();
        WriteLine("{");
        WriteLine($"    if (!writer.IsEnabled(Level.{level}))");
        WriteLine("        return;");
        ClearIndent();
        WriteLine(string.Empty);
        PushIndent("        ");
        PushIndent("    ");
        Write($"WriteUnchecked(writer, Level.{level}, text, ");
        for (int propertyIndex = 0; propertyIndex != propertyCount; ++propertyIndex)
        {
            if (propertyIndex != 0)
                Write(", ");

            Write("p" + propertyIndex);
        }

        WriteLine(");");
        PopIndent();
        WriteLine("}");
        ClearIndent();
    }
}
#>
    }
}
