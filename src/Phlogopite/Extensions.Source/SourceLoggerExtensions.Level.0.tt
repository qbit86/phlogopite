<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
using System.Runtime.CompilerServices;

namespace Phlogopite.Extensions.Source
{
    using PropertyCollection = SpanBuilder<NamedProperty>;

    public static partial class SourceLoggerExtensions
    {
<#
    string[] levels = { "Verbose", "Debug", "Info", "Warning", "Error", "Assert" };
    for (int i = 0; i != levels.Length; ++i)
    {
        if (i != 0)
            WriteLine(string.Empty);

        string level = levels[i];
        string methodName = level.Substring(0, 1);
#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void <#=methodName #><TLogger>(this TLogger logger, string text,
            [CallerMemberName] string source = null)
            where TLogger : ILogger<NamedProperty>
        {
            if (logger is null || !logger.IsEnabled(Level.<#=level #>))
                return;

            AllocateThenWrite0(logger, Level.<#=level #>, text, source);
        }
<#
    }
#>
    }
}
