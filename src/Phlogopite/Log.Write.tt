<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
using System;
using System.Buffers;
using System.Runtime.CompilerServices;
using Phlogopite.Extensions;

namespace Phlogopite
{
    public static partial class Log
    {
<#
const int startPropertyCount = 1;
const int maxPropertyCount = 4;

for (int propertyCount = startPropertyCount; propertyCount <= maxPropertyCount; ++propertyCount)
{
    ClearIndent();

    if (propertyCount > startPropertyCount)
        WriteLine(string.Empty);

    PushIndent("        ");
    WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
    WriteLine("public static void Write(Level level, string tag,");
    PushIndent("    ");
    for (int propertyIndex = 0; propertyIndex != propertyCount; ++propertyIndex)
    {
        if (propertyIndex != 0)
            Write(", ");

        Write("in NamedProperty p" + propertyIndex);
    }

    WriteLine(",");
    WriteLine("[CallerMemberName] string source = null)");
    ClearIndent();
    PushIndent("        ");
    WriteLine("{");
    WriteLine("    if (s_mediator is null || !s_mediator.IsEnabled(level))");
    WriteLine("        return;");
    WriteLine(string.Empty);
    Write("    MediatorExtensions.WriteUnchecked(s_mediator, level, tag, null");
    for (int propertyIndex = 0; propertyIndex != propertyCount; ++propertyIndex)
        Write(", p" + propertyIndex);

    WriteLine(", source);");
    WriteLine("}");

    ClearIndent();
    WriteLine(string.Empty);
    PushIndent("        ");
    WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
    WriteLine("public static void Write(Level level, string tag, string text,");
    PushIndent("    ");
    for (int propertyIndex = 0; propertyIndex != propertyCount; ++propertyIndex)
    {
        if (propertyIndex != 0)
            Write(", ");

        Write("in NamedProperty p" + propertyIndex);
    }

    WriteLine(",");
    WriteLine("[CallerMemberName] string source = null)");
    ClearIndent();
    PushIndent("        ");
    WriteLine("{");
    WriteLine("    if (s_mediator is null || !s_mediator.IsEnabled(level))");
    WriteLine("        return;");
    WriteLine(string.Empty);
    Write("    MediatorExtensions.WriteUnchecked(s_mediator, level, tag, text");
    for (int propertyIndex = 0; propertyIndex != propertyCount; ++propertyIndex)
        Write(", p" + propertyIndex);

    WriteLine(", source);");
    WriteLine("}");
}

ClearIndent();
#>
    }
}
