<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
using System.Runtime.CompilerServices;

namespace Phlogopite.Extensions.Tag
{
    using PropertyCollection = SpanBuilder<NamedProperty>;

    public static partial class TagLoggerExtensions
    {
<#
    const int startPropertyCount = 1;
    const int maxPropertyCount = 4;

    for (int propertyCount = startPropertyCount; propertyCount <= maxPropertyCount; ++propertyCount)
    {
        ClearIndent();
        if (propertyCount != startPropertyCount)
            WriteLine(string.Empty);

        PushIndent("        ");
        WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
        WriteLine("public static void Write<TLogger>(this TLogger logger, Level level, string category, string text,");
        PushIndent("    ");
        for (int propertyIndex = 0; propertyIndex != propertyCount; ++propertyIndex)
        {
            if (propertyIndex != 0)
                Write(", ");

            Write("in NamedProperty p" + propertyIndex);
        }

        WriteLine(",");
        WriteLine("[CallerMemberName] string source = null)");
        WriteLine("where TLogger : ILogger<NamedProperty>");
        PopIndent();
        WriteLine("{");
        PushIndent("    ");
        WriteLine("if (logger is null || !logger.IsEnabled(level))");
        WriteLine("    return;");
        ClearIndent();
        WriteLine(string.Empty);
        PushIndent("        ");
        Write($"    AllocateThenWrite{propertyCount}(logger, level, category, text, ");
        for (int propertyIndex = 0; propertyIndex != propertyCount; ++propertyIndex)
        {
            if (propertyIndex != 0)
                Write(", ");

            Write("p" + propertyIndex);
        }

        WriteLine(", source);");
        WriteLine("}");
        ClearIndent();
    }
#>
    }
}
